apiVersion: helm.toolkit.fluxcd.io/v2
kind: HelmRelease
metadata:
  name: prometheus
  namespace: monitoring  
spec:
  interval: 5m
  chart:
    spec:
      chart: prometheus
      version: '27.*' 
      sourceRef:
        kind: HelmRepository
        name: prometheus
        namespace: monitoring
  values:
    rbac:
      create: true
    imagePullSecrets: []
    serviceAccounts:
      server:
        create: true
        name: ""
        annotations: {}
    commonMetaLabels: {}
    configmapReload:
      reloadUrl: ""
      env: []
      prometheus:
        enabled: true
        name: configmap-reload
        image:
          repository: quay.io/prometheus-operator/prometheus-config-reloader
          tag: v0.86.1
          digest: ""
          pullPolicy: IfNotPresent
        containerPort: 8080
        containerPortName: metrics
        extraArgs: {}
        extraVolumeDirs: []
        extraVolumeMounts: []
        extraConfigmapMounts: []
        containerSecurityContext: {}
        livenessProbe:
          httpGet:
            path: /healthz
            port: metrics
            scheme: HTTP
          periodSeconds: 10
          initialDelaySeconds: 2
        readinessProbe:
          httpGet:
            path: /healthz
            port: metrics
            scheme: HTTP
          periodSeconds: 10
        startupProbe:
          enabled: false
          httpGet:
            path: /healthz
            port: metrics
            scheme: HTTP
          periodSeconds: 10
        resources: {}
    server:
      name: server
      releaseNamespace: false
      sidecarTemplateValues: {}
      image:
        repository: quay.io/prometheus/prometheus
        pullPolicy: IfNotPresent
      command: []
      enableServiceLinks: true
      extraFlags:
        - web.enable-lifecycle
      configPath: /etc/config/prometheus.yml
      storagePath: ""
      global:
        scrape_interval: 1m
        scrape_timeout: 10s
        evaluation_interval: 1m
      remoteWrite: []
      remoteRead: []
      tsdb: {}
      otlp: {}
      exemplars: {}
      probeHeaders: []
      extraArgs: {}
      extraConfigmapMounts: []
      extraSecretMounts: []
      configFromSecret: ""
      configMapOverrideName: ""
      extraConfigmapLabels: {}
      fullnameOverride: ""
      ingress:
        enabled: false
        ingressClassName: ""
        annotations: {}
        #   kubernetes.io/ingress.class: nginx
        #   kubernetes.io/tls-acme: 'true'
        extraLabels: {}
        hosts: []
        #   - prometheus.domain.com
        #   - domain.com/prometheus

        path: /
        pathType: Prefix
        extraPaths: []
        # - path: /*
        #   backend:
        #     serviceName: ssl-redirect
        #     servicePort: use-annotation

        ## Prometheus server Ingress TLS configuration (hosts passed through tpl)
        ## Secrets must be manually created in the namespace
        ##
        tls: []
        #   - secretName: prometheus-server-tls
        #     hosts:
        #       - prometheus.domain.com

      ## route (map) allows configuration of HTTPRoute resources
      ## Requires Gateway API resources and suitable controller installed within the cluster
      ## Ref. https://gateway-api.sigs.k8s.io/guides/http-routing/
      strategy:
        type: Recreate

      ## hostAliases allows adding entries to /etc/hosts inside the containers
      hostAliases: []
      #   - ip: "127.0.0.1"
      #     hostnames:
      #       - "example.com"

      ## Node tolerations for server scheduling to nodes with taints
      ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/
      ##
      tolerations: []
        # - key: "key"
        #   operator: "Equal|Exists"
        #   value: "value"
        #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

      ## Node labels for Prometheus server pod assignment
      ## Ref: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/
      ##
      nodeSelector: {}

      ## Pod affinity
      ##
      affinity: {}

      ## Pod anti-affinity can prevent the scheduler from placing Prometheus server replicas on the same node.
      ## The value "soft" means that the scheduler should *prefer* to not schedule two replica pods onto the same node but no guarantee is provided.
      ## The value "hard" means that the scheduler is *required* to not schedule two replica pods onto the same node.
      ## The default value "" will disable pod anti-affinity so that no anti-affinity rules will be configured (unless set in `server.affinity`).
      ##
      podAntiAffinity: ""

      ## If anti-affinity is enabled sets the topologyKey to use for anti-affinity.
      ## This can be changed to, for example, failure-domain.beta.kubernetes.io/zone
      ##
      podAntiAffinityTopologyKey: kubernetes.io/hostname

      ## Pod topology spread constraints
      ## ref. https://kubernetes.io/docs/concepts/scheduling-eviction/topology-spread-constraints/
      topologySpreadConstraints: []

      ## PodDisruptionBudget settings
      ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
      ##
      podDisruptionBudget:
        enabled: false
        # maxUnavailable: 1
        # minAvailable: 1
        ## unhealthyPodEvictionPolicy is available since 1.27.0 (beta)
        ## https://kubernetes.io/docs/tasks/run-application/configure-pdb/#unhealthy-pod-eviction-policy
        # unhealthyPodEvictionPolicy: IfHealthyBudget

      ## Use an alternate scheduler, e.g. "stork".
      ## ref: https://kubernetes.io/docs/tasks/administer-cluster/configure-multiple-schedulers/
      ##
      # schedulerName:

      persistentVolume:
        enabled: true
        accessModes:
          - ReadWriteOnce
        labels: {}
        annotations: {}
        existingClaim: ""
        mountPath: /data
        size: 8Gi
        storageClassName: iscsi
      statefulSet:
        enabled: false
        annotations: {}
        labels: {}
        podManagementPolicy: OrderedReady
        headless:
          annotations: {}
          labels: {}
          servicePort: 80
          gRPC:
            enabled: false
            servicePort: 10901
        pvcDeleteOnStsDelete: false
        pvcDeleteOnStsScale: false

      daemonSet:
        enabled: false
        annotations: {}
        labels: {}
      tcpSocketProbeEnabled: false
      probeScheme: HTTP
      readinessProbeInitialDelay: 30
      readinessProbePeriodSeconds: 5
      readinessProbeTimeout: 4
      readinessProbeFailureThreshold: 3
      readinessProbeSuccessThreshold: 1
      livenessProbeInitialDelay: 30
      livenessProbePeriodSeconds: 15
      livenessProbeTimeout: 10
      livenessProbeFailureThreshold: 3
      livenessProbeSuccessThreshold: 1
      startupProbe:
        enabled: false
        periodSeconds: 5
        failureThreshold: 30
        timeoutSeconds: 10
      resources:
        # limits:
        #   cpu: 500m
        #   memory: 512Mi
        requests:
          cpu: 500m
          memory: 512Mi
      hostNetwork: false
      dnsPolicy: ClusterFirst
      verticalAutoscaler:
        enabled: false
        # updateMode: "Auto"
        # containerPolicies:
        # - containerName: 'prometheus-server'
      dnsConfig: {}
        # nameservers:
        #   - 1.2.3.4
        # searches:
        #   - ns1.svc.cluster-domain.example
        #   - my.dns.search.suffix
        # options:
        #   - name: ndots
        #     value: "2"
      #   - name: edns0
      securityContext:
        runAsUser: 65534
        runAsNonRoot: true
        runAsGroup: 65534
        fsGroup: 65534
      containerSecurityContext: {}
      service:
        enabled: true
        annotations: {}
        labels: {}
        clusterIP: ""
        externalIPs: []
        loadBalancerIP: ""
        loadBalancerSourceRanges: []
        servicePort: 80
        sessionAffinity: None
        type: ClusterIP
        externalTrafficPolicy: ""
        gRPC:
          enabled: false
          servicePort: 10901
        statefulsetReplica:
          enabled: false
          replica: 0
        additionalPorts: []
      terminationGracePeriodSeconds: 300
      retention: "15d"
      retentionSize: ""
    ruleFiles: {}
    scrapeConfigFiles: []
    serverFiles:
      alerting_rules.yml: {}
      alerts: {}
      recording_rules.yml: {}
      rules: {}
      prometheus.yml:
        rule_files:
          - /etc/config/recording_rules.yml
          - /etc/config/alerting_rules.yml
        ## Below two files are DEPRECATED will be removed from this default values file
          - /etc/config/rules
          - /etc/config/alerts

        scrape_configs:
          - job_name: prometheus
            static_configs:
              - targets:
                - localhost:9090
          - job_name: 'kubernetes-apiservers'
            kubernetes_sd_configs:
              - role: endpoints
            scheme: https
            relabel_configs:
              - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
                action: keep
                regex: default;kubernetes;https

          - job_name: 'kubernetes-nodes'
            scheme: https
            # <kubernetes_sd_config>.
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
              # If your node certificates are self-signed or use a different CA to the
              # master CA, then disable certificate verification below. Note that
              # certificate verification is an integral part of a secure infrastructure
              # so this should only be disabled in a controlled environment. You can
              # disable certificate verification by uncommenting the line below.
              #
              # insecure_skip_verify: true
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            kubernetes_sd_configs:
              - role: node

            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$1/proxy/metrics


          - job_name: 'kubernetes-nodes-cadvisor'
            scheme: https
            tls_config:
              ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
            bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

            kubernetes_sd_configs:
              - role: node
            relabel_configs:
              - action: labelmap
                regex: __meta_kubernetes_node_label_(.+)
              - target_label: __address__
                replacement: kubernetes.default.svc:443
              - source_labels: [__meta_kubernetes_node_name]
                regex: (.+)
                target_label: __metrics_path__
                replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
          - job_name: 'kubernetes-service-endpoints'
            honor_labels: true

            kubernetes_sd_configs:
              - role: endpoints

            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                action: drop
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                action: replace
                target_label: __scheme__
                regex: (https?)
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                action: replace
                target_label: __address__
                regex: (.+?)(?::\d+)?;(\d+)
                replacement: $1:$2
              - action: labelmap
                regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target_label: service
              - source_labels: [__meta_kubernetes_pod_node_name]
                action: replace
                target_label: node
          - job_name: 'kubernetes-service-endpoints-slow'
            honor_labels: true

            scrape_interval: 5m
            scrape_timeout: 30s

            kubernetes_sd_configs:
              - role: endpoints

            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
                action: replace
                target_label: __scheme__
                regex: (https?)
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
                action: replace
                target_label: __address__
                regex: (.+?)(?::\d+)?;(\d+)
                replacement: $1:$2
              - action: labelmap
                regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                action: replace
                target_label: service
              - source_labels: [__meta_kubernetes_pod_node_name]
                action: replace
                target_label: node

          - job_name: 'prometheus-pushgateway'
            honor_labels: true

            kubernetes_sd_configs:
              - role: service

            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                action: keep
                regex: pushgateway
          - job_name: 'kubernetes-services'
            honor_labels: true

            metrics_path: /probe
            params:
              module: [http_2xx]

            kubernetes_sd_configs:
              - role: service

            relabel_configs:
              - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
                action: keep
                regex: true
              - source_labels: [__address__]
                target_label: __param_target
              - target_label: __address__
                replacement: blackbox
              - source_labels: [__param_target]
                target_label: instance
              - action: labelmap
                regex: __meta_kubernetes_service_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                target_label: namespace
              - source_labels: [__meta_kubernetes_service_name]
                target_label: service

          - job_name: 'kubernetes-pods'
            honor_labels: true

            kubernetes_sd_configs:
              - role: pod

            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                action: drop
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                action: replace
                regex: (https?)
                target_label: __scheme__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                action: replace
                regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                replacement: '[$2]:$1'
                target_label: __address__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                action: replace
                regex: (\d+);((([0-9]+?)(\.|$)){4})
                replacement: $2:$1
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
              - source_labels: [__meta_kubernetes_pod_phase]
                regex: Pending|Succeeded|Failed|Completed
                action: drop
              - source_labels: [__meta_kubernetes_pod_node_name]
                action: replace
                target_label: node
          - job_name: 'kubernetes-pods-slow'
            honor_labels: true

            scrape_interval: 5m
            scrape_timeout: 30s

            kubernetes_sd_configs:
              - role: pod

            relabel_configs:
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
                action: keep
                regex: true
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
                action: replace
                regex: (https?)
                target_label: __scheme__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
                action: replace
                target_label: __metrics_path__
                regex: (.+)
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                action: replace
                regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
                replacement: '[$2]:$1'
                target_label: __address__
              - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
                action: replace
                regex: (\d+);((([0-9]+?)(\.|$)){4})
                replacement: $2:$1
                target_label: __address__
              - action: labelmap
                regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
                replacement: __param_$1
              - action: labelmap
                regex: __meta_kubernetes_pod_label_(.+)
              - source_labels: [__meta_kubernetes_namespace]
                action: replace
                target_label: namespace
              - source_labels: [__meta_kubernetes_pod_name]
                action: replace
                target_label: pod
              - source_labels: [__meta_kubernetes_pod_phase]
                regex: Pending|Succeeded|Failed|Completed
                action: drop
              - source_labels: [__meta_kubernetes_pod_node_name]
                action: replace
                target_label: node
    extraScrapeConfigs: ""
    alertRelabelConfigs: {}
    networkPolicy:
      enabled: false
    extraManifests: []
    alertmanager:
      enabled: true
      persistence:
        enabled: true
        annotations: {}
        labels: {}
        storageClassName: iscsi 
        accessModes:
          - ReadWriteOnce
        size: 2Gi
        emptyDir: {}

      podSecurityContext:
        runAsUser: 65534
        runAsNonRoot: true
        runAsGroup: 65534
        fsGroup: 65534
    kube-state-metrics:
      enabled: true
    prometheus-node-exporter:
      enabled: true
      rbac:
        pspEnabled: false
      containerSecurityContext:
        allowPrivilegeEscalation: false
    prometheus-pushgateway:
      enabled: true
      serviceAnnotations:
        prometheus.io/probe: pushgateway
